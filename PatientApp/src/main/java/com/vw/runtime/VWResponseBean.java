package com.vw.runtime;
public class VWResponseBean extends VWCoreResponseBean
{
	@SuppressWarnings("unchecked")
	public VWResponseBean()
	{
		responseCodesMap.put("VWT_INTEGER", "Data for Swift TAG(<<0>>), VALUE(<<1>>)) is not of type Integer, Integer Expected");
		responseCodesMap.put("VWT_DTLONG", "Data for Swift TAG(<<0>>), VALUE(<<1>>)) is not of type Long, Long Expected");
		responseCodesMap.put("VWT_DTFLOAT", "Data for Swift TAG(<<0>>), VALUE(<<1>>)) is not of type Float, Float Expected");
		responseCodesMap.put("VWT_DTBOOLEAN", "Data for Swift TAG(<<0>>), VALUE(<<1>>)) is not of type Boolean, Boolean Expected");
		responseCodesMap.put("FIELD_LEVEL_2", "Either {<<0>>} OR {<<1>>} may exist, not both");
		responseCodesMap.put("FIELD_LEVEL_3", "Either {<<0>>} OR {<<1>>} OR {<<2>>} may exist, not ALL");
		responseCodesMap.put("FIELD_LEVEL_4", "Either {<<0>>} OR {<<1>>} OR {<<2>>} OR {<<3>>} may exist, not ALL");
		responseCodesMap.put("SWIFT_MESG_LENGTH", "Swift Message has exceeded maximum input message Length. Max Allowed is (<<0>>) but incoming has (<<1>>) as length");
		responseCodesMap.put("SWIFT_FIELD_LENGTH", "Swift Tag(<<0>>) has exceeded allowed MAXIMUM(<<1>>) Length");
		responseCodesMap.put("SWIFT_FIELD_CODE", "Swift Tag(<<0>>) Code line must begin with '/'  and code must be enclosed in '/'");
		responseCodesMap.put("SWIFT_FIELD_ALLOWED_CODES", "Swift Tag(<<0>>) CODE('<<1>>') not allowed");
		responseCodesMap.put("SWIFT_FIELD_LINES", "Swift Tag(<<0>>) has exceeded allowed MAXIMUM(<<1>>) lines");
		responseCodesMap.put("SWIFT_MESG_NOT_REGISTERED_BIC_ERROR", "Destination BIC is not registered in this system");
		responseCodesMap.put("SWIFT_MAX_REPEAT_ALLOWED", "<<0>> cannot repeat more than <<1>> times");
		responseCodesMap.put("SWIFT_BIC_ERROR", "If <<0>> exits then <<1>> is Mandatory");
		responseCodesMap.put("SWIFT_ERROR_NAME&ADDRESS", "If <<0>> exits then <<1>> is Mandatory");
		responseCodesMap.put("SWIFT_ERROR_LOCATION", "If <<0>> exits then <<1>> is Mandatory");
		responseCodesMap.put("SWIFT_FORMAT_ERROR", "The allowed format for <<1>> is <<0>>");
		responseCodesMap.put("SWIFT_ENVELOPE_ERROR_1", "<<0>> is Mandatory and must be in /CODE/ENVELOPE  format e.g. /UEDI/UNH+123A5+FINPAY:D:98A:UN'DOC+ ... ");
		responseCodesMap.put("SWIFT_ENVELOPE_ERROR_2", "Invalid <<0>>. Allowed format is /CODE/ENVELOPE, CODE AND ENVELOPE are mandatory");
		responseCodesMap.put("SWIFT_ENVELOPE_ERROR_3", "Invalid <<0>>-CODE. Allowed format is /CODE/ENVELOPE, Allowed codes are /ANSI/, /IXML/, /NARR/, /SWIF/, /UEDI/");
		responseCodesMap.put("SWIFT_ENVELOPE_ERROR_4", "Invalid <<0>>-ENVELOPE. Allowed format is /CODE/ENVELOPE. ENVELOPE must contain SWFIT-Z characters only");
		responseCodesMap.put("SWIFT_ACKNACK", "testing ack or nack");
		responseCodesMap.put("T52", "Currency (<<0>>), Amount (<<1>>) has exceeded the allowed MAXIMUM of <<2>> decimal places for this currency");
		responseCodesMap.put("T40", "Data for Swift TAG(<<0>>,<<1>>) is not of type Swift AMOUNT");
		responseCodesMap.put("T43", "Data for Swift TAG(<<0>>,<<1>>) is not of type Swift AMOUNT");
		responseCodesMap.put("T50", "Data for Swift TAG(<<0>>,<<1>>) is not of type Swift DATE(YYMMDD)");
		responseCodesMap.put("T26", "Data for Swift <<0>> must not start or end with a / and must not contain two consecutive slashes //");
		responseCodesMap.put("C02", "All currencies codes  must be same");
		responseCodesMap.put("C03", "Currency (<<0>>), Amount (<<1>>) has exceeded the allowed MAXIMUM of <<2>> decimal places for this currency");
		responseCodesMap.put("C90-1", "If TAG-42M exists no other TAG-42 tags may exist");
		responseCodesMap.put("C90-2", "If TAG-42P exists no other TAG-42 tags may exist");
		responseCodesMap.put("C90-3", "If TAG-42P exists no other TAG-42 tags may exist");
		responseCodesMap.put("C90-4", "If TAG-42C exists, either TAG-42A OR TAG-42D (ANY ONE) must exist");
		responseCodesMap.put("C90-5", "If TAG-42a exists, TAG-42C must exist");
		responseCodesMap.put("C90-6", "If TAG-42C exists, TAG-42a must exist");
		responseCodesMap.put("C12-1", "TAG-34B must be present if either TAG-32B OR TAG-33B exists");
		responseCodesMap.put("C12-2", " If TAG-34B exists, either TAG-32B OR TAG-33B must exist");
		responseCodesMap.put("D81",   "If (Part 1) of TAG-40 is OTHR then (Part 2) of TAG-40 is mandatory");
		responseCodesMap.put("C30", "Atleast TAG-31E, TAG-32B, TAG-33B, TAG-34B, TAG-39A, TAG-39B, TAG-39C, TAG-44A, TAG-44E, TAG-44F, TAG-44B, TAG-44C, TAG-44D, TAG-79 OR TAG-72 must be present");
		responseCodesMap.put("C71", "<<0>> cannot appear more than <<1>> times");
		responseCodesMap.put("C13", "If TAG-33B or TAG-71B or TAG-73 is present then TAG-34B should also be present");
		responseCodesMap.put("C18", "If both TAG-32B & TAG-71B are present then TAG-33 should also be present");
		responseCodesMap.put("C15", "Atleast TAG-31E, TAG-32B, TAG-33B, TAG-34B, TAG-39A, TAG-39B, TAG-39C, TAG-72 OR TAG-77A must be present");
		responseCodesMap.put("C19", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("D05", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("D06", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("C14", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("D84", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("C17", "if Tag73 is present then either Tag33A or Tag33B must be present");
		responseCodesMap.put("C78", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("C77", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("C06", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("C16", "IF TAG23 IS PRESSENT THEN  52a MUST BE PRESENT");
		responseCodesMap.put("C33", "Either <<0>> OR <<1>> may exists");
		responseCodesMap.put("C34", "Either <<0>> OR <<1>> may exists, not both");
		responseCodesMap.put("D75", "if currency code is different from the currency code in field 32A, field 36 must be present, otherwise field 36 is not allowed");
		responseCodesMap.put("D49", "country codes of the Sender's and the Receiver's BICs in list 33B is mandatory otherwise 33B Optional");
		responseCodesMap.put("E01", "If TAG-23B contains the code SPRI then field 23E should contains the code SDVA, TELB, PHOB, INTC");
		responseCodesMap.put("E02", "If TAG-23B contains one of the codes SSTD or SPAY then field 23E should not be used ");
		responseCodesMap.put("E03", "If TAG-23B contains one of the codes SPRI, SSTD or SPAY then field 53a must not be used with option D");
		responseCodesMap.put("E04", "If TAG-23B contains one of the codes SPRI, SSTD or SPAY thenfield 53a is present with option B & Party Identifier must be present in field 53B");
		responseCodesMap.put("E05", "If TAG-23B contains one of the codes SPRI, SSTD or SPAY then field 54a may be used with option A only");
		responseCodesMap.put("E06", "If TAG-55a is present then both fields 53a and 54a must also be present");
		responseCodesMap.put("E07", "If TAG-23B contains one of the codes SPRI, SSTD or SPAY then field 55a may be used with option A only");
		responseCodesMap.put("C81", "If TAG-56a is present then field 57a must also be present");
		responseCodesMap.put("E16", "If TAG-23B contains the code SPRI then field 56a must not be present");
		responseCodesMap.put("E17", "If TAG-23B contains SSTD or SPAY then field 56a may be used with either option A or option C and If option C is used, it must contain a clearing code");
		responseCodesMap.put("E09", "If TAG-23B contains SPRI, SSTD or SPAY then field 57a may be used with option A,option C or option D. Subfield 1 (Party Identifier) in option D must be present");
		responseCodesMap.put("E10", "If TAG-23B contains SPRI, SSTD or SPAY then <<0>> is mandatory");
		responseCodesMap.put("E18", "If any field 23E contains the code CHQB then subfield 1 (Account) in field 59a Beneficiary Customer is not allowed");
		responseCodesMap.put("E13", "If TAG-71A contains OUR, then field 71F is not allowed and field 71G is optional");
		responseCodesMap.put("D50", "If TAG-71A contains SHA, then field 71F is(are) optional and field 71G is not allowed");
		responseCodesMap.put("E15", "If TAG-71A contains BEN, then at least one occurrence of field 71F is mandatory and field 71G is not allowed");
		responseCodesMap.put("D51", "If either TAG-71F (at least one occurrence) or field 71G is present, then field 33B is mandatory,otherwise field 33B is optional");
		responseCodesMap.put("E44", "If TAG-56a is not present, no field 23E may contain TELI or PHOI");
		responseCodesMap.put("E45", "If TAG-57a is not present, no field 23E may contain TELE or PHON");
		responseCodesMap.put("C02Payment", "The currency code in the fields 71G and 32A must be the same");
		responseCodesMap.put("C68", "If TAG-56a is present in sequence B, then field 57a must also be present in sequence B");
		responseCodesMap.put("ERROR_13C_0", "(T15)(T16)(T38) '/'s not found e.g /CLSTIME/1159+0100");
		responseCodesMap.put("ERROR_13C_1", "(T15)(T16)(T38) '/'s found without any subfields e.g /CLSTIME/1159+0100");
		responseCodesMap.put("ERROR_13C_2", "(T15)(T16)(T38) (Code) not found e.g /CLSTIME/1159+0100 (/CODE/Time_Indication)");
		responseCodesMap.put("ERROR_13C_3", "(T15)(T16)(T38) (Time_Indication) not found e.g /CLSTIME/1159+0100 (/CODE/Time_Indication)");
		responseCodesMap.put("ERROR_13C_4", "(T15)(T16)(T38) TAG-13C must follow /(Code)/(Time Indication)(Sign)(Time offset) format e.g /CLSTIME/1159+0100");
		responseCodesMap.put("T36", "One of the following codes must be used");
		responseCodesMap.put("T47", "Instruction Code must contain one of the following codes of TAG-23E");
		responseCodesMap.put("D97", "Additional Information is only allowed when Instruction Code consists of one of the following code PHON, PHOB, PHOI, TELE, TELB, TELI, HOLD or REPA");
		responseCodesMap.put("D98", "(TAG-23E) If this field is repeated, the codes must appear in the following order");
		responseCodesMap.put("D98-1", "(TAG-23E) If <<0>> is present, then <<1>> is not allowed");
		responseCodesMap.put("D67", "When this field is used more than once, the following combinations are not allow");
		responseCodesMap.put("C08", "The codes XAU, XAG, XPD and XPT are not allowed");
		responseCodesMap.put("T54", "TAG-50F must be in /(Account) OR (Code)/(Country Code)/(Identifier) format");
		responseCodesMap.put("T54-2", "TAG-50F must be in (Number)/(Details) format");
		responseCodesMap.put("T55", "TAG-50F must be in (Code)/(Country Code)/(Identifier) format");
		responseCodesMap.put("T56", "TAG-50F, Number must contain one of the values in 50a (Number)");
		responseCodesMap.put("T27,T28,T29,T45", "Identifier Code must be a registered BIC");
		responseCodesMap.put("T73", "<<0>>(Part-<<1>>), subfield 1 (Party Identifier) used with the (Code)/(Country Code)/(Identifier) format: Country Code must be a valid ISO country code");
		//responseCodesMap.put("T73", "TAG-50F, subfield 1 (Party Identifier) used with the (Code)/(Country Code)/(Identifier) format: Country Code must be a valid ISO country code");
		responseCodesMap.put("E46", "(TAG-23E) This <<0>> code must not repeat");
		responseCodesMap.put("T60", "One of the codes must be used");
		responseCodesMap.put("T59", "One of the codes must be used in Applicable Rules");
		responseCodesMap.put("T01", "One of the code must be used");
		responseCodesMap.put("T68", "If TAG-41a exists in option A or D Code must contain the following codes");
		responseCodesMap.put("T67", "If TAG-49 exists One of the code must be used");
		responseCodesMap.put("D19_1", "If TAG-57A is not present then 59a subfield Account is Mandatory with IBAN (ISO 13616)");
		responseCodesMap.put("D19_2", "If TAG-57A is present and country code in the financial institution BIC in 57A with in the list of country codes then 59a subfield Account is Mandatory with IBAN (ISO 13616)");
		responseCodesMap.put("T08", "If TAG-71A Exists then One of the code must be used BEN,OUR,SHA");
		responseCodesMap.put("T64", "If TAG-40B_1 Exists then One of the code must be used ");
		responseCodesMap.put("T66", "If TAG-40B_2 Exists then One of the code must be used ");
	}
}
